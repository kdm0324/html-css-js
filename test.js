// react 를 사용하는 이유
// 웹을 만들기 위해서는 HTML CSS JS 를 이용해야함.
// 그러나 복잡해 지면서 HTML, JS 가 많이 사용되게 되는데,
// 점점 하나의 HTML 파일에 수많은 JS 라이브러리 HTML 요소를 포함하게 됨.
// --> 유지보수 하기가 어려워짐.

// 수많은 js 라이브러리 불러와서 사용하면, 라이브러리 객체들끼리 이름이 같아서 충돌할 수가 있음.
// --> axios 같은 경우 스크립트에서 사용하고...

// ==> React 를 이용하면 이런문제들을 깔끔하게 해결할 수 있음.

// React 시작하기
// Node & NPM 이해하기
// 처음에 js 는 브라우저에서만 실행되는 언어였음. js 를 읽고 실행시키기 위해서 브라우저들은 서로 다른 엔진(코드 인터프리터) 등을 가지고 있습니다.
// 점점 JS 가 널리 사용되면서, ' 웹 개발 말고 다른 곳에서도 사용할 수 있지 않을까?'하는 이야기가 나왔음.
// --> 그래서 브라우저 뿐만 아니라 자체적으로 프로그램을 만들어서 실행할 수 있도록 나온 기술이 node.js 입니다.

// node.js 는 대표적으로 서버 프로그램을 개발할 때 많이 사용됩니다.

// node 프로젝트를 하기 위해 꼭 필요한 것이 npm 입니다. node package manager의 약자로
// node 프로젝트의 패키지(외부라이브러리)를 관리해주는 저장소 역할을 합니다.

// - 브라우저 : js 불러올 때 <script> 를 이용해서 외부 자바스크립트 파일을 그때 그때 다운 받는다.
// - node : 외부 자바스크립트 파일을 npm 이 맡아서 관리하게 됩니다. 보통 npm 에 외부 라이브러리를 한 번에 다 저장해 놓은 후 관리해줍니다.

// react 도 node와 npm 을 기반으로 하지만, 결과적으로 브라우저가 이해할 수 있는 형태로 변형됨.
// 기본적으로 node.js는 화면을 그려주는 역할이 없기 때문에, 웹 빌드 도구(Babel, Webpack)를 이용해서 브라우저가 이해할 수 있는 언어로 바꿔주는 작업이 필수이다.

// node -v
// npm -v
// 각각의 버전 확인

console.log("hello dongmin!");
